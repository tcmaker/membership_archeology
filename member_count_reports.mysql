/* based on collapsed_log, get current and new memberships for a single date */
SET @report_date = '2020-10-01';

-- list of memberships
SELECT a.contact_id, a.membership_id, a.membership_type_id, a.owner_membership_id, a.end_date FROM
(SELECT * FROM collapsed_membership_log WHERE modified_date <= @report_date) a
LEFT JOIN
(SELECT * FROM collapsed_membership_log WHERE modified_date <= @report_date) b
ON a.membership_id = b.membership_id AND a.modified_date < b.modified_date
WHERE b.membership_id IS NULL
  AND a.start_date <= @report_date
  AND (a.end_date >= @report_date OR a.end_date IS NULL)
  AND a.status_id IN (1,2);

-- aggregate totals (type+=100 signifies a membership w/ an owner membership)
SELECT @report_date AS date, a.membership_type_id + IF(a.owner_membership_id,100,0) as type, count(*) as count FROM
(SELECT * FROM collapsed_membership_log WHERE modified_date <= @report_date) a
LEFT JOIN
(SELECT * FROM collapsed_membership_log WHERE modified_date <= @report_date) b
ON a.membership_id = b.membership_id AND a.modified_date < b.modified_date
WHERE b.membership_id IS NULL
  AND a.start_date <= @report_date
  AND (a.end_date >= @report_date OR a.end_date IS NULL)
  AND a.status_id IN (1,2)
group by type;

-- aggregate record aggregate counts, stored procedure populates table containing membership totals for each date
DELIMITER //
CREATE PROCEDURE populate_daily_membership_totals(start_date DATE)
BEGIN
  DECLARE report_date DATE;
  SET report_date = start_date;
  TRUNCATE TABLE `daily_membership_type_total`;
  WHILE report_date < current_date() DO
    INSERT INTO daily_membership_type_total
      SELECT report_date AS date, a.membership_type_id + IF(a.owner_membership_id,100,0) as type, count(*) as count
      FROM (SELECT * FROM collapsed_membership_log WHERE modified_date <= report_date) a
      LEFT JOIN (SELECT * FROM collapsed_membership_log WHERE modified_date <= report_date) b
        ON a.membership_id = b.membership_id AND a.modified_date < b.modified_date
        WHERE b.membership_id IS NULL AND a.start_date <= report_date AND (a.end_date >= report_date OR a.end_date IS NULL) AND a.status_id IN (1,2)
      group by type;    
    SET report_date = report_date + INTERVAL 1 DAY;
  END WHILE;
END //

DELIMITER ;

-- table to support the above procedure
CREATE TABLE `daily_membership_type_total` (
  `date` date NOT NULL,
  `type` int(11) NOT NULL,
  `count` int(11) NOT NULL,
  PRIMARY KEY (`date`,`type`)
)

-- generate data going back to roughly the beginning
CALL populate_daily_membership_totals('2016-01-01');

-- pivot table summing each membership type per month
SELECT date,
GROUP_CONCAT(IF(type=1,   count, NULL)) AS standard,
GROUP_CONCAT(IF(type=2,   count, NULL)) AS rockstar,
GROUP_CONCAT(IF(type=3,   count, NULL)) AS yearly,
GROUP_CONCAT(IF(type=4,   count, NULL)) AS student_senior,
GROUP_CONCAT(IF(type=5,   count, NULL)) AS staff,
GROUP_CONCAT(IF(type=6,   count, NULL)) AS board,
GROUP_CONCAT(IF(type=7,   count, NULL)) AS honorary,
GROUP_CONCAT(IF(type=8,   count, NULL)) AS school_mentor,
GROUP_CONCAT(IF(type=10,  count, NULL)) AS 6_month,
GROUP_CONCAT(IF(type=11,  count, NULL)) AS complimentary,
GROUP_CONCAT(IF(type=12,  count, NULL)) AS school_student,
GROUP_CONCAT(IF(type=13,  count, NULL)) AS monthly,
GROUP_CONCAT(IF(type=14,  count, NULL)) AS annual,
GROUP_CONCAT(IF(type=15,  count, NULL)) AS board_fixed,
GROUP_CONCAT(IF(type=16,  count, NULL)) AS staff_fixed,
GROUP_CONCAT(IF(type=110, count, NULL)) AS 6_month_family,
GROUP_CONCAT(IF(type=113, count, NULL)) AS monthly_family,
GROUP_CONCAT(IF(type=114, count, NULL)) AS annual_family,
GROUP_CONCAT(IF(type=115, count, NULL)) AS board_fixed_family,
GROUP_CONCAT(IF(type=116, count, NULL)) AS staff_fixed_family
FROM daily_membership_type_total GROUP BY date;
